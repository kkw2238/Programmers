/* https://programmers.co.kr/learn/courses/30/lessons/72410 */

/*
	아이디의 길이는 3자 이상 15자 이하여야 합니다.
	아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다.
	단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.
*/

/*
	1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
	2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
	3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
	4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
	5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
	6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
		 만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
	7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
*/

#include <string>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_SIZE = 15;
const int MIN_SIZE = 3;

const bool IsWrongChar(const char c) {
	if (c >= 'a' && c <= 'z') return false;
	else if (c >= '0' && c <= '9') return false;
	else if (c == '-' || c == '_' || c == '.') return false;

	return true;
}

void CH1(string& new_id) {
	std::transform(new_id.begin(), new_id.end(), new_id.begin(), tolower);
}

void CH2(string& new_id) {
	auto iter = find_if(new_id.begin(), new_id.end(), IsWrongChar);
	
	while (iter != new_id.end()) {
		new_id.erase(iter);
		iter = find_if(iter, new_id.end(), IsWrongChar);
	}
}

void CH3(string& new_id) {
	int index = 0;
	while (index > -1) {
		index = new_id.find("..", index);
		if (index > -1) {
			new_id.replace(new_id.begin() + index, new_id.begin() + index + 2, ".");
		}
	}
}

void CH4(string& new_id) {
	if (new_id[0] == '.') new_id.erase(new_id.begin());
	if (new_id[new_id.length() - 1] == '.') new_id.erase(new_id.end() - 1);
}

void CH5(string& new_id) {
	if (new_id.empty()) {
		new_id = "a";
	}
}

void CH6(string& new_id) {
	if (new_id.length() > MAX_SIZE) {
		new_id.erase(new_id.begin() + MAX_SIZE, new_id.end());
	}

	CH3(new_id);
}

void CH7(string& new_id) {
	if (new_id.length() < MIN_SIZE) {
		for (int i = 0; i < MIN_SIZE - new_id.length();) {
			new_id.push_back(new_id[new_id.length() - 1]);
		}
	}
}

string solution(string new_id) {
	CH1(new_id);
	CH2(new_id);
	CH3(new_id);
	CH4(new_id);
	CH5(new_id);
	CH6(new_id);
	CH7(new_id);
	return new_id;
}

#include <iostream>

int main() {
	string new_id = "=.=";
	cout << solution(new_id);
}